IaC
- Infrastructure as a Code
- 코드를 통한 자동화
- Ansible, Terraform, puppet, chef
- 각 도구들 마다 가용 범위가 제한적
    -> 배포도구 / 구성관리도구
- 클라우드환경처럼 대규모 환경을 배포 및 관리할 때 필요
- 시간 절약, 비용 절감, 오류 감소
- AWS CloudFormation 도 IaC에 포함(배포용)
- Terraform 과 CloudFormation 어느 것을 사용해도 결과는 차이가 없음

Terraform
- 클라우드 환경에 대한 리소스 배포 용도의 IaC
- HCL 이라는 구성파일을 작성하고 사용
- 프로바이더에 대한 지정
- 주요 기능
    1. 코드형 인프라 - 재사용, 버전관리
    2. 실행 계획 - 현재 상태와 비교
    3. 리소스 종속성 - 병렬화, 직접 종속성 정의 가능
    4. 변경 자동화 - 순서에 대해 정확히 몰라도 가능
- 작업단계
    1. 구성파일(코드) 을 작성
    2. 초기화 및 계획
    3. 배포(적용)





2. 배포할 리소스 정의
    resource 블록으로 지정
        -> 종류와 이름 및 속성값을 지정
    현재 상태와 비교(tfstate 파일을 이용해 비교)
        -> 새로 배포 / 삭제 / 변경(태그) 도 가능
3. 변수 사용
    구성파일 혹은 별도의 파일에 변수이름 및 값 선언
    variable "변수 이름" {
        데이터타입 및 기본값 등을 정의
    }
    명령어 / 환경변수 등으로 값을 재정의 후 사용
    terraform apply -var="변수이름=변수값"
    terraform apply -var-file="변수파일이름"
    export TF_VARS_변수이름 (variable 사전선언되어 있어야 합니다.)
    로컬변수 선언 가능
        -> 구성파일 혹은 별도의 파일에 작성 가능
    local {
        여러 가지 변수의 이름-값 형태로 나열
        값을 선언할 때
            1. 문자열
            2. var.XX
            3. ${var.XX}    // 가공
    }
    명령어 실행 후 별도로 확인하려는 값은 output 블록에 선언
    output {
        변수이름 = resource_type.resource_name.attribute
    }
    data 블록을 사용하면 리소스의 데이터를 가져와서 사용 가능
    data "aws_ami" "amazon-image" {
        most_recent = true
        tag = {
            Name = XXXX // 검색 키워드
        }
    }






